[{"C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\Router.js":"1","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\routes\\Profile.js":"2","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\fbase.js":"3","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\routes\\Home.js":"4","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\App.js":"5","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\routes\\Auth.js":"6","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\Navigation.js":"7","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\Nweet.js":"8","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\AuthForm.js":"9","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\NweetFactory.js":"10","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\index.js":"11"},{"size":1195,"mtime":1618827718452,"results":"12","hashOfConfig":"13"},{"size":1378,"mtime":1618827872915,"results":"14","hashOfConfig":"13"},{"size":757,"mtime":1614517736533,"results":"15","hashOfConfig":"13"},{"size":895,"mtime":1618827814728,"results":"16","hashOfConfig":"13"},{"size":1041,"mtime":1618826668226,"results":"17","hashOfConfig":"13"},{"size":1324,"mtime":1618827766425,"results":"18","hashOfConfig":"13"},{"size":1164,"mtime":1618827559104,"results":"19","hashOfConfig":"13"},{"size":2218,"mtime":1618827621651,"results":"20","hashOfConfig":"13"},{"size":1964,"mtime":1618827399691,"results":"21","hashOfConfig":"13"},{"size":2852,"mtime":1618827648106,"results":"22","hashOfConfig":"13"},{"size":275,"mtime":1618828040815,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"srsnye",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"29"},"C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\Router.js",[],"C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\routes\\Profile.js",["53"],"import React, { useState } from \"react\";\r\nimport { authService } from \"fbase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          autoFocus\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n      </form>\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};",["54","55"],"C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\fbase.js",[],"C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\routes\\Home.js",["56"],"import React, { useState, useEffect } from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweets, setNweets] = useState([]);\r\n  useEffect(() => {\r\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n      const nweetArray = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setNweets(nweetArray);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"container\">\r\n      <NweetFactory userObj={userObj} />\r\n      <div style={{marginTop:30}}>\r\n        {nweets.map((nweet) => (\r\n          <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwner={nweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\App.js",[],"C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\routes\\Auth.js",[],"C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\Navigation.js",[],"C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\Nweet.js",["57"],"import React, { useState } from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n    if (ok) {\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n      await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n      text: newNweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewNweet(value);\r\n  };\r\n  return (\r\n    <div className=\"nweet\">\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your nweet\"\r\n              value={newNweet}\r\n              required\r\n              autoFocus\r\n              onChange={onChange}\r\n              className=\"formInput\"\r\n            />\r\n            <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n          </form>\r\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancel\r\n          </span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{nweetObj.text}</h4>\r\n          {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\r\n          {isOwner && (\r\n            <div class=\"nweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nweet;","C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\AuthForm.js",["58"],"import React, { useState } from \"react\";\r\nimport { authService } from \"fbase\";\r\n\r\nconst inputStyles = {};\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          className=\"authInput\"\r\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span onClick={toggleAccount} className=\"authSwitch\">\r\n        {newAccount ? \"Sign In\" : \"Create Account\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\nexport default AuthForm;",["59","60"],"C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\components\\NweetFactory.js",["61"],"C:\\Users\\ghio1\\Documents\\nomad-twitter\\src\\index.js",["62"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from 'components/App';\r\nimport firebase from \"./fbase\";\r\nimport \"./styles.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n",{"ruleId":"63","severity":1,"message":"64","line":5,"column":1,"nodeType":"65","endLine":52,"endColumn":3},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":21,"nodeType":"72","messageId":"73","endLine":2,"endColumn":35},{"ruleId":"74","severity":1,"message":"75","line":53,"column":38,"nodeType":"76","endLine":53,"endColumn":74},{"ruleId":"70","severity":1,"message":"77","line":4,"column":7,"nodeType":"72","messageId":"73","endLine":4,"endColumn":18},{"ruleId":"66","replacedBy":"78"},{"ruleId":"68","replacedBy":"79"},{"ruleId":"74","severity":1,"message":"75","line":82,"column":11,"nodeType":"76","endLine":87,"endColumn":13},{"ruleId":"70","severity":1,"message":"80","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":16},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'storageService' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'inputStyles' is assigned a value but never used.",["81"],["82"],"'firebase' is defined but never used.","no-global-assign","no-unsafe-negation"]